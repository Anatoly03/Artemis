configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly "org.springframework.boot:spring-boot-devtools:${spring_boot_version}"
}

def profiles = "dev"
if (project.hasProperty("no-liquibase")) {
    profiles += ",no-liquibase"
}
if (project.hasProperty("tls")) {
    profiles += ",tls"
}

springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

bootRun {
    args = []
}

task npm_install(type: NpmTask) {
    workingDir = file("../")
    args = ['install']
}

task webapp(type: NpmTask) {
    workingDir = file("../")

    inputs.property('appVersion', project.version)
    inputs.files("../package.json")
        .withPropertyName('package')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("../package-lock.json")
        .withPropertyName('package-lock')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("../build.gradle")
        .withPropertyName('build.gradle')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("../angular.json")
        .withPropertyName('angular.json')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("../tsconfig.json", "../tsconfig.app.json")
        .withPropertyName("tsconfig")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("../webpack/")
        .withPropertyName("webpack/")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("../src/main/webapp/")
        .withPropertyName("webapp-source-dir")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.dir("../build/resources/main/static/")
        .withPropertyName("webapp-build-dir")

    dependsOn npm_install

    args = ["run", "webapp:build"]
    environment = [APP_VERSION: project.version]
}

task copyClientBuildFiles(type: Copy) {
    from "../build/resources/main/static"
    into "build/resources/main/static"
    exclude "config"
    fileMode = 0644
}

processResources {
    inputs.property('version', version)
    inputs.property('springProfiles', profiles)
    filesMatching("**/application.yml") {
        filter {
            it.replace("#project.version#", version)
        }
    }
    filesMatching("**/bootstrap.yml") {
        filter {
            it.replace("#spring.profiles.active#", profiles)
        }
    }
}

tasks.copyClientBuildFiles.dependsOn webapp
processResources.dependsOn tasks.copyClientBuildFiles
bootJar.dependsOn processResources
