#TODO: ask for newer docker-compose version on bamboo agents
version: '2.4'

services:
    artemis-mysql:
        extends:
            file: ../mysql.yml
            service: artemis-mysql
        healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
            interval: 1s
            timeout: 3s
            retries: 30

    artemis-app:
        build:
            # This is required to copy the Artemis war file properly into the container
            context: ../../../..
            dockerfile: src/main/docker/Dockerfile
        volumes:
            - ../../resources/config/application-prod.yml:/opt/artemis/config/application-prod.yml:ro
            - ./application.yml:/opt/artemis/config/application.yml:ro
        environment:
            _JAVA_OPTIONS: "-Xmx5120m -Xms2560m"
            JHIPSTER_SLEEP: 30 # gives time for other services to boot before the application
            spring.profiles.active: "prod,bamboo,bitbucket,jira,artemis"
            spring.datasource.url: "${DATASOURCE_URL}"
            spring.datasource.username: root
            spring.datasource.password: ""
            artemis.user-management.internal-admin.username: "${ADMIN_USERNAME}"
            artemis.user-management.internal-admin.password: "${ADMIN_PASSWORD}"
            artemis.user-management.external.url: "${UM_URL}"
            artemis.user-management.external.user: "${UM_USER}"
            artemis.user-management.external.password: "${UM_PASSWORD}"
            artemis.version-control.url: "${SCM_URL}"
            artemis.version-control.user: "${SCM_USER}"
            artemis.version-control.password: "${SCM_PASSWORD}"
            artemis.continuous-integration.url: "${CI_URL}"
            artemis.continuous-integration.user: "${CI_USER}"
            artemis.continuous-integration.password: "${CI_PASSWORD}"
            artemis.continuous-integration.token: "${CI_TOKEN}"
            artemis.continuous-integration.artemis-authentication-token-value: "${CI_AUTH_TOKEN}"
            server.url: "${SERVER_URL}"
        ports:
            - 8080:8080
        networks:
            - artemis
        healthcheck:
            test: [ "CMD", "wget" ,"-nv", "-t1", "--spider", "http://localhost:8080" ]
            interval: 15s
        depends_on:
            artemis-mysql:
                condition: service_healthy

#    artemis-app-new:
#        image: ghcr.io/ls1intum/artemis:develop-deployment-wg
#        volumes:
#            - artemis-data:/opt/artemis/data
#        # TODO: sort out non-necessary configs and go through application.yml from old container
#        environment:
#            _JAVA_OPTIONS: "-Xmx5120m -Xms2560m"
#            spring.profiles.active: "prod,bamboo,bitbucket,jira,artemis,docker"
#            spring.datasource.url: "${DATASOURCE_URL}"
#            spring.datasource.username: root
#            spring.datasource.password: ""
#            artemis.user-management.internal-admin.username: "${ADMIN_USERNAME}"
#            artemis.user-management.internal-admin.password: "${ADMIN_PASSWORD}"
#            artemis.user-management.external.url: "${UM_URL}"
#            artemis.user-management.external.user: "${UM_USER}"
#            artemis.user-management.external.password: "${UM_PASSWORD}"
#            artemis.version-control.url: "${SCM_URL}"
#            artemis.version-control.user: "${SCM_USER}"
#            artemis.version-control.password: "${SCM_PASSWORD}"
#            artemis.continuous-integration.url: "${CI_URL}"
#            artemis.continuous-integration.user: "${CI_USER}"
#            artemis.continuous-integration.password: "${CI_PASSWORD}"
#            artemis.continuous-integration.token: "${CI_TOKEN}"
#            artemis.continuous-integration.artemis-authentication-token-value: "${CI_AUTH_TOKEN}"
#            server.url: "${SERVER_URL}"
#        ports:
#            - 8080:8080
#        networks:
#            - artemis
#        depends_on:
#            artemis-mysql:
#                condition: service_healthy

    artemis-nginx:
        # nginx setup based on artemis prod ansible repository
        # TODO: merge KIT settings for the proxy
        # TODO: Adjust worker_rlimit_nofile in nginx.conf (from ansible task)
        # TODO: Adjust worker_connections in nginx.conf (from ansible task)
        # TODO: Adjust worker_connections in nginx.conf (from ansible task)
        # TODO: Ensure file-max limit in sysctl.conf (from ansible task)
        # TODO: Copy security-limits nginx.conf (from ansible task)
        # TODO: Copy systemd-limits nginx.conf (from ansible task)
        image: nginx:latest
        restart: "unless-stopped"
        volumes:
            - ./nginx-files/timeouts.conf:/etc/nginx/conf.d/timeouts.conf:ro
            - ./nginx-files/artemis.conf:/etc/nginx/conf.d/artemis.conf:ro
            - ./nginx-files/dhparam.pem:/etc/nginx/dhparam.pem:ro
            - ./nginx-files/nginx_502.html:/usr/share/nginx/html/502.html:ro
            - ./nginx-files/70-artemis-setup.sh:/docker-entrypoint.d/70-artemis-setup.sh
            - ../../../test/cypress/certs/artemis-nginx+4.pem:/certs/fullchain.pem:ro
            - ../../../test/cypress/certs/artemis-nginx+4-key.pem:/certs/priv_key.pem:ro
            #- ./pki:/etc/pki/nginx:ro
            #- ./defaults/templates:/etc/nginx/templates:ro
            #- ./defaults/nginx.conf:/etc/nginx/nginx.conf:ro
            #- ./defaults/proxy.conf:/etc/nginx/proxy.conf:ro
            #- ./defaults/ssl.conf:/etc/nginx/ssl.conf:ro
            #- ./defaults/dhparam.pem:/etc/nginx/dhparam.pem:ro
        ports:
            - 80:80
            - 443:443
        networks:
            - artemis

    artemis-cypress:
        # Cypress image with node and chrome browser installed (Cypress installation needs to be done separately because we require additional dependencies)
        image: cypress/browsers:node18.6.0-chrome105-ff104
        depends_on:
            artemis-app:
                condition: service_healthy
        environment:
            - CYPRESS_baseUrl
            - CYPRESS_adminUsername
            - CYPRESS_adminPassword
            - CYPRESS_username
            - CYPRESS_password
            - CYPRESS_allowGroupCustomization
            - CYPRESS_studentGroupName
            - CYPRESS_tutorGroupName
            - CYPRESS_editorGroupName
            - CYPRESS_instructorGroupName
        # Wait up to 5 minutes until Artemis has booted
        command: sh -c "cd /app/artemis/src/test/cypress && chmod 777 /root && npm ci && npm exec -- wait-on -i 1000 -t 300000 https://artemis-nginx && npm run cypress:run"
        volumes:
            - ../../../../:/app/artemis
        networks:
            - artemis

networks:
    artemis:
        driver: "bridge"

#volumes:
#    artemis-data:
#        name: artemis-data
