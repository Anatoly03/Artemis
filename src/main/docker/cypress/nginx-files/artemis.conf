# Load balancing
upstream artemis {
    server artemis-app:8080;
}

# Remove nginx version from HTTP response
server_tokens off;

# Rate limit for the login REST call, at most one requests per two seconds
limit_req_zone $binary_remote_addr zone=loginlimit:10m rate=30r/m;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    return 301 https://$host$request_uri;
}

server {
    listen 54321 default_server;
    listen [::]:54321 default_server;
    server_name _;

    resolver 127.0.0.11;
    resolver_timeout 5s;
    client_max_body_size 10m;
    client_body_buffer_size 1m;

    location / {
        proxy_pass http://artemis;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
#       proxy_set_header Early-Data $ssl_early_data;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_send_timeout 900s;
        proxy_read_timeout 900s;
        proxy_max_temp_file_size 0;
        proxy_buffering on;
        proxy_buffer_size 16k;
        proxy_buffers 8 16k;
        proxy_busy_buffers_size 32k;
        fastcgi_send_timeout 900s;
        fastcgi_read_timeout 900s;
        client_max_body_size 128M;
    }

    location /api/authenticate {
        proxy_pass http://artemis/api/authenticate;
		# For a given violation of the rate limit defined in the zone
		# * the first 2 (delay) requests will be allowed without delay
		# * the next (burst - delay) request waits until it fits in the rate limit
		# * the rest will be denied
		# If an attacker spams this endpoint, only the first three requests will come through.
		# This only resets if the violation of the rate limit stops.
        limit_req zone=loginlimit burst=3 delay=2;
    }

    location /favicon.ico {
        return 404;
    }

    error_page 502 /502.html;
    location /502.html {
        root /usr/share/nginx/html;
        internal;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    ssl_certificate     /certs/fullchain.pem;
    ssl_certificate_key /certs/priv_key.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    # TODO: dynamic dh param generation not needed here? Otherwise have to generate them somehow if not available at container entrypoint
    ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_prefer_server_ciphers   on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
#   ssl_early_data on;
    resolver 127.0.0.11;
    resolver_timeout 5s;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    client_max_body_size 10m;
    client_body_buffer_size 1m;

    location / {
        proxy_pass http://artemis;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
#       proxy_set_header Early-Data $ssl_early_data;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_send_timeout 900s;
        proxy_read_timeout 900s;
        proxy_max_temp_file_size 0;
        proxy_buffering on;
        proxy_buffer_size 16k;
        proxy_buffers 8 16k;
        proxy_busy_buffers_size 32k;
        fastcgi_send_timeout 900s;
        fastcgi_read_timeout 900s;
        client_max_body_size 128M;
    }

    location /api/authenticate {
        proxy_pass http://artemis/api/authenticate;
		# For a given violation of the rate limit defined in the zone
		# * the first 2 (delay) requests will be allowed without delay
		# * the next (burst - delay) request waits until it fits in the rate limit
		# * the rest will be denied
		# If an attacker spams this endpoint, only the first three requests will come through.
		# This only resets if the violation of the rate limit stops.
        limit_req zone=loginlimit burst=3 delay=2;
    }

    location /favicon.ico {
        return 404;
    }

    error_page 502 /502.html;
    location /502.html {
        root /usr/share/nginx/html;
        internal;
    }
}
